{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","$","click","pathname","replace","this","target","hash","length","slice","animate","scrollTop","offset","top","addClass","removeClass","navbarCollapse","document","documentElement","body","scroll"],"mappings":"sOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCxHnB,IAAMR,EAAWD,OAAOC,UAExB,SAAUS,GAGRA,EAAE,kDAAkDC,OAAM,WACxD,GAAIV,EAASW,SAASC,QAAQ,MAAO,MAAQC,KAAKF,SAASC,QAAQ,MAAO,KAAOZ,EAASC,WAAaY,KAAKZ,SAAU,CACpH,IAAIa,EAASL,EAAEI,KAAKE,MAEpB,IADAD,EAASA,EAAOE,OAASF,EAASL,EAAE,SAAWI,KAAKE,KAAKE,MAAM,GAAK,MACzDD,OAIT,OAHAP,EAAE,cAAcS,QAAQ,CACtBC,UAAYL,EAAOM,SAASC,IAAM,IACjC,MACI,MAMbZ,EAAE,sBAAsBC,OAAM,WAC5BD,EAAE,oBAAoBa,SAAS,WAGnCb,EAAE,eAAeC,OAAM,WACnBD,EAAEI,MAAMS,SAAS,SAASC,YAAY,YAQxCxB,OAAOU,EAAIA,EAEX,IAAIe,EAAiB,WACff,EAAE,YAAYW,SAASC,IAAM,IAC/BZ,EAAE,YAAYa,SAAS,kBAEvBb,EAAE,YAAYc,YAAY,kBAEb,KADHxB,OAAO0B,SAASC,gBAAgBP,WAAapB,OAAO0B,SAASE,KAAKR,YAEzEV,EAAE,cAAcS,QAAQ,CAAEC,UAAW,GAAK,KAKjDK,IAEAf,EAAEV,QAAQ6B,OAAOJ,GA9CnB,CAgDGf,O","file":"static/js/main.97b70264.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.css';\nimport './team.css';\nimport $ from 'jquery';\nimport * as serviceWorker from './serviceWorker';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nconst location = window.location;\n\n(function($) {\n\n  // Smooth scrolling using jQuery easing\n  $('a.js-scroll-trigger[href*=\"#\"]:not([href=\"#\"])').click(function() {\n    if (location.pathname.replace(/^\\//, '') === this.pathname.replace(/^\\//, '') && location.hostname === this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: (target.offset().top - 70)\n        }, 1000);\n        return false;\n      }\n    }\n  });\n\n  // Closes responsive menu when a scroll trigger link is clicked\n  $('.js-scroll-trigger').click(function() {\n    $('.navbar-collapse').addClass('hide');\n  });\n  //Image Flip :\n$('.image-flip').click(function() {\n    $(this).addClass('hover').removeClass('hover');\n  });\n\n  // Activate scrollspy to add active class to navbar items on scroll\n  // $('body').scrollspy({\n  //   target: '#mainNav',\n  //   offset: 100\n  // });\n  window.$ = $;\n  // Collapse Navbar\n  var navbarCollapse = function() {\n    if ($(\"#mainNav\").offset().top > 200) {\n      $(\"#mainNav\").addClass(\"navbar-shrink\");\n    } else {\n      $(\"#mainNav\").removeClass(\"navbar-shrink\");\n      var top = window.document.documentElement.scrollTop || window.document.body.scrollTop;\n      if(top  === -1){\n         $('html, body').animate({ scrollTop: 0 }, 1);\n      }\n    }\n  };\n  // Collapse now if page is not at top\n  navbarCollapse();\n  // Collapse the navbar when page is scrolled\n  $(window).scroll(navbarCollapse);\n\n})($); // End of use strict"],"sourceRoot":""}